This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-29T06:41:13.837Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.bolt/
  config.json
  prompt
clerk-react/
  public/
    vite.svg
  src/
    assets/
      react.svg
    App.css
    App.tsx
    index.css
    main.tsx
    vite-env.d.ts
  .gitignore
  eslint.config.js
  index.html
  package.json
  README.md
  tsconfig.app.json
  tsconfig.json
  tsconfig.node.json
  vite.config.ts
src/
  components/
    ai/
      AIPrompt.tsx
      ChatMessage.tsx
    auth/
      PrivateRoute.tsx
    common/
      LoadingSpinner.tsx
    dashboard/
      DashboardHeader.tsx
    navigation/
      MobileMenu.tsx
      NavButton.tsx
      NavLink.tsx
    projects/
      ProjectsList.tsx
    webcontainer/
      Terminal.tsx
      WebContainer.tsx
    FAQ.tsx
    Features.tsx
    Header.tsx
    Hero.tsx
    HowItWorks.tsx
    Pricing.tsx
  pages/
    Dashboard.tsx
    LandingPage.tsx
  services/
    webcontainer/
      config.ts
      instance.ts
      process.ts
    ai.ts
    clerk.ts
    webcontainer.ts
  store/
    useStore.ts
  types/
    index.ts
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
.gitignore
eslint.config.js
index.html
package.json
postcss.config.js
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Repository Files
================================================================

================
File: .bolt/config.json
================
{
  "template": "bolt-vite-react-ts"
}

================
File: .bolt/prompt
================
For all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.

By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.

Use icons from lucide-react for logos.

Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.

================
File: clerk-react/public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: clerk-react/src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: clerk-react/src/App.css
================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

================
File: clerk-react/src/App.tsx
================
import { useState } from 'react'
import reactLogo from './assets/react.svg'
import viteLogo from '/vite.svg'
import './App.css'

function App() {
  const [count, setCount] = useState(0)

  return (
    <>
      <div>
        <a href="https://vite.dev" target="_blank">
          <img src={viteLogo} className="logo" alt="Vite logo" />
        </a>
        <a href="https://react.dev" target="_blank">
          <img src={reactLogo} className="logo react" alt="React logo" />
        </a>
      </div>
      <h1>Vite + React</h1>
      <div className="card">
        <button onClick={() => setCount((count) => count + 1)}>
          count is {count}
        </button>
        <p>
          Edit <code>src/App.tsx</code> and save to test HMR
        </p>
      </div>
      <p className="read-the-docs">
        Click on the Vite and React logos to learn more
      </p>
    </>
  )
}

export default App

================
File: clerk-react/src/index.css
================
:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

================
File: clerk-react/src/main.tsx
================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

================
File: clerk-react/src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: clerk-react/.gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: clerk-react/eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)

================
File: clerk-react/index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: clerk-react/package.json
================
{
  "name": "clerk-react",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.15.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.15.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.12.0",
    "typescript": "~5.6.2",
    "typescript-eslint": "^8.15.0",
    "vite": "^6.0.1"
  }
}

================
File: clerk-react/README.md
================
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
```

================
File: clerk-react/tsconfig.app.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}

================
File: clerk-react/tsconfig.json
================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

================
File: clerk-react/tsconfig.node.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

================
File: clerk-react/vite.config.ts
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})

================
File: src/components/ai/AIPrompt.tsx
================
import React, { useState } from 'react';
import { Send, Sparkles, Loader2 } from 'lucide-react';
import ChatMessage from './ChatMessage';
import { Message } from '../../types';
import { generateCode } from '../../services/ai';
import { useStore } from '../../store/useStore';
import { writeFile, installDependencies, startDevServer } from '../../services/webcontainer';

export default function AIPrompt() {
  const [prompt, setPrompt] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const { currentProject, updateProjectFiles } = useStore();
  const [messages, setMessages] = useState<Message[]>([
    {
      type: 'assistant',
      content: 'Hello! I\'m your AI coding assistant. Describe what you want to build, and I\'ll help you create it in real-time. For example:\n\n"Create a React component for a todo list with TypeScript"',
      timestamp: new Date(),
    },
  ]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!prompt.trim() || isLoading || !currentProject) return;

    const userMessage: Message = {
      type: 'user',
      content: prompt,
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setIsLoading(true);

    try {
      // Generate code using AI
      const generatedCode = await generateCode(prompt);
      
      // Create file name based on prompt
      const fileName = `generated_${Date.now()}.tsx`;
      const filePath = `src/${fileName}`;

      // Update project files in store
      updateProjectFiles(currentProject.id, {
        [filePath]: generatedCode
      });

      // Write file to WebContainer
      await writeFile(filePath, generatedCode);

      // Install any new dependencies if needed
      await installDependencies();

      // Start dev server if not already running
      await startDevServer();

      const aiResponse: Message = {
        type: 'assistant',
        content: `I've generated the code and created ${fileName}. The changes are now live in the web container. You can see the results in the preview. Let me know if you need any modifications!`,
        timestamp: new Date(),
      };

      setMessages(prev => [...prev, aiResponse]);
    } catch (error) {
      console.error('Error:', error);
      const errorMessage: Message = {
        type: 'assistant',
        content: 'Sorry, I encountered an error while generating and deploying the code. Please try again.',
        timestamp: new Date(),
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
      setPrompt('');
    }
  };

  return (
    <div className="h-full flex flex-col bg-[#0D0D1E]/50">
      <div className="p-4 border-b border-white/10 flex items-center space-x-2">
        <Sparkles className="w-5 h-5 text-purple-400" />
        <h2 className="text-lg font-semibold">AI Assistant</h2>
      </div>

      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((message, index) => (
          <ChatMessage key={index} {...message} />
        ))}
        {isLoading && (
          <div className="flex items-center justify-center py-4">
            <Loader2 className="w-6 h-6 text-purple-400 animate-spin" />
          </div>
        )}
      </div>

      <form onSubmit={handleSubmit} className="p-4 border-t border-white/10">
        <div className="relative">
          <textarea
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="Describe what you want to build..."
            className="w-full px-4 py-3 pr-12 rounded-lg glass-effect bg-white/5 text-white 
                     placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500
                     min-h-[80px] max-h-[200px] resize-y"
            disabled={isLoading || !currentProject}
          />
          <button
            type="submit"
            disabled={isLoading || !currentProject || !prompt.trim()}
            className={`absolute right-2 bottom-2 p-2 rounded-lg 
                      ${!prompt.trim() || isLoading || !currentProject ? 
                        'bg-gray-600 cursor-not-allowed opacity-50' : 
                        'bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-500 hover:to-pink-500'}
                      transition-all duration-300`}
          >
            {isLoading ? (
              <Loader2 className="w-4 h-4 animate-spin" />
            ) : (
              <Send className="w-4 h-4" />
            )}
          </button>
        </div>
        {!currentProject && (
          <p className="mt-2 text-sm text-gray-400">Create or select a project to start using AI assistance</p>
        )}
      </form>
    </div>
  );
}

================
File: src/components/ai/ChatMessage.tsx
================
import React from 'react';
import { User, Bot } from 'lucide-react';
import { Message } from '../../types';

export default function ChatMessage({ type, content, timestamp }: Message) {
  return (
    <div className={`flex space-x-3 ${type === 'assistant' ? 'items-start' : 'items-start'}`}>
      <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${
        type === 'assistant' ? 'bg-purple-500/20' : 'bg-pink-500/20'
      }`}>
        {type === 'assistant' ? (
          <Bot className="w-5 h-5 text-purple-400" />
        ) : (
          <User className="w-5 h-5 text-pink-400" />
        )}
      </div>
      <div className="flex-1">
        <div className={`p-3 rounded-lg ${
          type === 'assistant' ? 'glass-effect' : 'bg-white/5'
        }`}>
          <p className="text-sm text-gray-200">{content}</p>
        </div>
        <span className="text-xs text-gray-500 mt-1">
          {timestamp.toLocaleTimeString()}
        </span>
      </div>
    </div>
  );
}

================
File: src/components/auth/PrivateRoute.tsx
================
import React from 'react';
import { useClerk } from '@clerk/clerk-react';
import { Navigate } from 'react-router-dom';
import LoadingSpinner from '../common/LoadingSpinner';

interface PrivateRouteProps {
  children: React.ReactNode;
}

export default function PrivateRoute({ children }: PrivateRouteProps) {
  const { session, loaded } = useClerk();

  if (!loaded) {
    return <LoadingSpinner />;
  }

  return session ? <>{children}</> : <Navigate to="/" replace />;
}

================
File: src/components/common/LoadingSpinner.tsx
================
import React from 'react';
import { Loader2 } from 'lucide-react';

export default function LoadingSpinner() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-[#0D0D1E]">
      <Loader2 className="w-8 h-8 text-purple-400 animate-spin" />
    </div>
  );
}

================
File: src/components/dashboard/DashboardHeader.tsx
================
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { useClerk, UserResource } from '@clerk/clerk-react';
import { Code2, Settings, LogOut } from 'lucide-react';

interface DashboardHeaderProps {
  user: UserResource;
}

export default function DashboardHeader({ user }: DashboardHeaderProps) {
  const { signOut } = useClerk();
  const navigate = useNavigate();

  const handleSignOut = async () => {
    await signOut();
    navigate('/');
  };

  return (
    <header className="h-14 border-b border-white/10 px-4 flex items-center justify-between bg-[#0D0D1E]/95 backdrop-blur-sm">
      <div className="flex items-center space-x-4">
        <div className="flex items-center space-x-2 group">
          <Code2 className="w-6 h-6 text-purple-400 transform group-hover:rotate-12 transition-transform duration-300" />
          <span className="text-lg font-semibold text-white">Aikode</span>
        </div>
        <nav className="hidden md:flex space-x-4">
          <button className="text-gray-400 hover:text-white transition-colors">Projects</button>
          <button className="text-gray-400 hover:text-white transition-colors">Settings</button>
        </nav>
      </div>
      
      <div className="flex items-center space-x-4">
        <div className="flex items-center space-x-2">
          <img
            src={user.imageUrl}
            alt={user.fullName || 'User'}
            className="w-8 h-8 rounded-full border border-white/10"
          />
          <span className="hidden md:block text-sm text-gray-300">{user.fullName}</span>
        </div>
        <div className="flex items-center space-x-2">
          <button 
            className="p-2 rounded-lg hover:bg-white/5 transition-colors"
            title="Settings"
          >
            <Settings className="w-5 h-5 text-gray-400" />
          </button>
          <button 
            onClick={handleSignOut}
            className="p-2 rounded-lg hover:bg-white/5 transition-colors"
            title="Sign Out"
          >
            <LogOut className="w-5 h-5 text-gray-400" />
          </button>
        </div>
      </div>
    </header>
  );
}

================
File: src/components/navigation/MobileMenu.tsx
================
import React from 'react';
import { Menu, X } from 'lucide-react';
import NavLink from './NavLink';
import NavButton from './NavButton';

interface MobileMenuProps {
  isOpen: boolean;
  onToggle: () => void;
  isAuthenticated: boolean;
  onSignIn: () => void;
  onSignUp: () => void;
  onSignOut: () => void;
}

export default function MobileMenu({ 
  isOpen, 
  onToggle, 
  isAuthenticated,
  onSignIn,
  onSignUp,
  onSignOut
}: MobileMenuProps) {
  return (
    <div className="md:hidden">
      <button onClick={onToggle} className="text-white p-2">
        {isOpen ? <X className="w-6 h-6" /> : <Menu className="w-6 h-6" />}
      </button>

      {isOpen && (
        <div className="absolute top-full left-4 right-4 mt-2 p-4 rounded-2xl bg-gradient-to-b from-purple-900/90 to-gray-900/90 backdrop-blur-xl
                      border border-purple-500/20 shadow-xl transform animate-fadeIn">
          <nav className="flex flex-col space-y-4">
            <NavLink href="#">Home</NavLink>
            <NavLink href="#">How it Works</NavLink>
            <NavLink href="#">Features</NavLink>
            <NavLink href="#">Pricing</NavLink>
            <NavLink href="#">FAQ</NavLink>
            {!isAuthenticated ? (
              <>
                <button
                  onClick={onSignUp}
                  className="text-gray-300 hover:text-white transition-colors duration-300"
                >
                  Sign Up
                </button>
                <NavButton onClick={onSignIn}>Sign In</NavButton>
              </>
            ) : (
              <NavButton onClick={onSignOut}>Sign Out</NavButton>
            )}
          </nav>
        </div>
      )}
    </div>
  );
}

================
File: src/components/navigation/NavButton.tsx
================
import React from 'react';

interface NavButtonProps {
  children: React.ReactNode;
  onClick?: () => void;
}

export default function NavButton({ children, onClick }: NavButtonProps) {
  return (
    <button
      onClick={onClick}
      className="px-6 py-2.5 rounded-full bg-gradient-to-r from-purple-600 to-pink-600 text-white font-medium
                transform hover:scale-105 hover:shadow-lg hover:shadow-purple-500/25
                transition-all duration-300 ease-out"
    >
      {children}
    </button>
  );
}

================
File: src/components/navigation/NavLink.tsx
================
import React from 'react';

interface NavLinkProps {
  href: string;
  children: React.ReactNode;
}

export default function NavLink({ href, children }: NavLinkProps) {
  return (
    <a
      href={href}
      className="relative text-gray-300 hover:text-white transition-colors duration-300 group"
    >
      {children}
      <span className="absolute inset-x-0 -bottom-1 h-0.5 bg-gradient-to-r from-purple-500 to-pink-500 transform scale-x-0 group-hover:scale-x-100 transition-transform duration-300" />
    </a>
  );
}

================
File: src/components/projects/ProjectsList.tsx
================
import React, { useState } from 'react';
import { FolderPlus, Folder, Trash2, Code } from 'lucide-react';
import { useStore } from '../../store/useStore';
import { Project } from '../../types';

interface ProjectsListProps {
  isCollapsed: boolean;
}

export default function ProjectsList({ isCollapsed }: ProjectsListProps) {
  const [showNewProjectDialog, setShowNewProjectDialog] = useState(false);
  const [newProjectName, setNewProjectName] = useState('');
  const { projects, addProject, setCurrentProject, currentProject, deleteProject } = useStore();

  const handleCreateProject = () => {
    if (!newProjectName.trim()) return;

    const newProject: Project = {
      id: crypto.randomUUID(),
      name: newProjectName,
      files: {
        'src/App.tsx': '// Start coding here\n',
      },
    };

    addProject(newProject);
    setCurrentProject(newProject);
    setNewProjectName('');
    setShowNewProjectDialog(false);
  };

  return (
    <div className="h-full bg-[#0D0D1E]/50 flex flex-col overflow-hidden">
      <div className="p-4 border-b border-white/10">
        {!isCollapsed ? (
          <button
            onClick={() => setShowNewProjectDialog(true)}
            className="w-full px-4 py-2 rounded-lg bg-gradient-to-r from-purple-600 to-pink-600 
                     hover:from-purple-500 hover:to-pink-500 flex items-center justify-center 
                     space-x-2 transition-all duration-300"
          >
            <FolderPlus className="w-4 h-4" />
            <span>New Project</span>
          </button>
        ) : (
          <button
            onClick={() => setShowNewProjectDialog(true)}
            className="w-full flex justify-center p-2 rounded-lg bg-gradient-to-r 
                     from-purple-600 to-pink-600 hover:from-purple-500 hover:to-pink-500 
                     transition-all duration-300"
            title="New Project"
          >
            <FolderPlus className="w-5 h-5" />
          </button>
        )}
      </div>

      {showNewProjectDialog && !isCollapsed && (
        <div className="p-4 border-b border-white/10 bg-black/20">
          <input
            type="text"
            value={newProjectName}
            onChange={(e) => setNewProjectName(e.target.value)}
            placeholder="Project name"
            className="w-full px-3 py-2 rounded-lg glass-effect bg-white/5 text-white 
                     placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 mb-2"
          />
          <div className="flex space-x-2">
            <button
              onClick={handleCreateProject}
              className="flex-1 px-3 py-1.5 rounded-lg bg-purple-600 hover:bg-purple-500 transition-colors"
            >
              Create
            </button>
            <button
              onClick={() => setShowNewProjectDialog(false)}
              className="flex-1 px-3 py-1.5 rounded-lg bg-gray-600 hover:bg-gray-500 transition-colors"
            >
              Cancel
            </button>
          </div>
        </div>
      )}

      <div className="flex-1 overflow-y-auto p-4 space-y-2">
        {projects.map((project) => (
          <div
            key={project.id}
            className={`group rounded-lg glass-effect hover:bg-white/10 flex items-center 
                     justify-between transition-all duration-300 ${
                       currentProject?.id === project.id ? 'bg-white/10 ring-2 ring-purple-500' : ''
                     } ${isCollapsed ? 'p-2' : 'p-3'}`}
          >
            <button
              onClick={() => setCurrentProject(project)}
              className="flex items-center space-x-3 flex-1 min-w-0"
            >
              <Code className="w-5 h-5 text-purple-400 flex-shrink-0" />
              {!isCollapsed && (
                <span className="truncate">{project.name}</span>
              )}
            </button>
            {!isCollapsed && (
              <button
                onClick={() => deleteProject(project.id)}
                className="opacity-0 group-hover:opacity-100 p-1.5 rounded-lg hover:bg-red-500/20 
                         text-red-400 transition-all duration-300"
              >
                <Trash2 className="w-4 h-4" />
              </button>
            )}
          </div>
        ))}

        {projects.length === 0 && !isCollapsed && (
          <div className="text-center text-gray-400 py-8">
            <Folder className="w-12 h-12 mx-auto mb-3 text-gray-500" />
            <p>No projects yet</p>
            <p className="text-sm">Create a new project to get started</p>
          </div>
        )}
      </div>
    </div>
  );
}

================
File: src/components/webcontainer/Terminal.tsx
================
import React, { useEffect, useRef } from 'react';
import { Terminal as XTerm } from '@xterm/xterm';
import { FitAddon } from 'xterm-addon-fit';
import { setTerminal } from '../../services/webcontainer/instance';
import '@xterm/xterm/css/xterm.css';

export default function Terminal() {
  const terminalRef = useRef<HTMLDivElement>(null);
  const xtermRef = useRef<XTerm | null>(null);
  const fitAddonRef = useRef<FitAddon | null>(null);

  useEffect(() => {
    if (!terminalRef.current || xtermRef.current) return;

    const term = new XTerm({
      theme: {
        background: '#0D0D1E',
        foreground: '#ffffff',
        cursor: '#ffffff',
        selection: 'rgba(255, 255, 255, 0.3)',
        black: '#000000',
        brightBlack: '#666666',
        red: '#ff5555',
        brightRed: '#ff6e6e',
        green: '#50fa7b',
        brightGreen: '#69ff94',
        yellow: '#f1fa8c',
        brightYellow: '#ffffa5',
        blue: '#bd93f9',
        brightBlue: '#d6acff',
        magenta: '#ff79c6',
        brightMagenta: '#ff92df',
        cyan: '#8be9fd',
        brightCyan: '#a4ffff',
        white: '#f8f8f2',
        brightWhite: '#ffffff'
      },
      fontSize: 14,
      fontFamily: 'JetBrains Mono, monospace',
      cursorBlink: true,
      cursorStyle: 'block',
    });

    const fitAddon = new FitAddon();
    term.loadAddon(fitAddon);
    fitAddonRef.current = fitAddon;

    xtermRef.current = term;
    setTerminal(term);

    // Delay opening the terminal to ensure the container is ready
    setTimeout(() => {
      if (terminalRef.current) {
        term.open(terminalRef.current);
        fitAddon.fit();
      }
    }, 0);

    const resizeObserver = new ResizeObserver(() => {
      if (fitAddonRef.current) {
        fitAddonRef.current.fit();
      }
    });

    if (terminalRef.current) {
      resizeObserver.observe(terminalRef.current);
    }

    return () => {
      resizeObserver.disconnect();
      term.dispose();
    };
  }, []);

  return (
    <div className="h-full bg-[#0D0D1E] p-2">
      <div ref={terminalRef} className="h-full rounded-lg overflow-hidden" />
    </div>
  );
}

================
File: src/components/webcontainer/WebContainer.tsx
================
import React, { useState, useEffect } from 'react';
import Split from 'react-split';
import { Editor } from '@monaco-editor/react';
import Terminal from './Terminal';
import { useStore } from '../../store/useStore';
import { File, FolderOpen } from 'lucide-react';
import { getWebContainer } from '../../services/webcontainer';

export default function WebContainer() {
  const { currentProject } = useStore();
  const [currentFile, setCurrentFile] = useState<string | null>(null);
  const [isReady, setIsReady] = useState(false);

  useEffect(() => {
    const initWebContainer = async () => {
      try {
        await getWebContainer();
        setIsReady(true);
      } catch (error) {
        console.error('Failed to initialize WebContainer:', error);
      }
    };

    initWebContainer();
  }, []);

  const files = currentProject?.files || {};
  const activeFile = currentFile || Object.keys(files)[0];

  if (!isReady) {
    return (
      <div className="h-full flex items-center justify-center bg-[#0D0D1E]">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-purple-500 mx-auto mb-4"></div>
          <p className="text-gray-400">Initializing development environment...</p>
        </div>
      </div>
    );
  }

  return (
    <Split
      direction="vertical"
      sizes={[70, 30]}
      minSize={[200, 100]}
      gutterSize={4}
      className="h-full flex flex-col"
    >
      <div className="h-full flex">
        {/* File Explorer */}
        <div className="w-48 border-r border-white/10 bg-[#0D0D1E]/50">
          <div className="p-3 border-b border-white/10">
            <div className="flex items-center space-x-2">
              <FolderOpen className="w-4 h-4 text-purple-400" />
              <span className="text-sm font-medium text-gray-300">Files</span>
            </div>
          </div>
          <div className="p-2">
            {Object.keys(files).map((path) => (
              <button
                key={path}
                onClick={() => setCurrentFile(path)}
                className={`w-full px-3 py-2 rounded-lg flex items-center space-x-2 text-sm
                          ${activeFile === path ? 'bg-white/10 text-white' : 'text-gray-400 hover:bg-white/5'}
                          transition-colors duration-200`}
              >
                <File className="w-4 h-4 flex-shrink-0" />
                <span className="truncate">{path.split('/').pop()}</span>
              </button>
            ))}
          </div>
        </div>

        {/* Code Editor */}
        <div className="flex-1 bg-[#0D0D1E]">
          <Editor
            height="100%"
            defaultLanguage="typescript"
            value={files[activeFile] || '// Select a file to start coding'}
            theme="vs-dark"
            options={{
              fontSize: 14,
              fontFamily: 'JetBrains Mono, monospace',
              minimap: { enabled: false },
              padding: { top: 20 },
              scrollBeyondLastLine: false,
              lineNumbers: 'on',
              roundedSelection: true,
              automaticLayout: true,
              tabSize: 2,
              wordWrap: 'on',
            }}
            onChange={(value) => {
              if (currentProject && activeFile && value) {
                useStore.getState().updateProjectFiles(currentProject.id, {
                  [activeFile]: value,
                });
              }
            }}
          />
        </div>
      </div>

      {/* Terminal */}
      <div className="h-full">
        <Terminal />
      </div>
    </Split>
  );
}

================
File: src/components/FAQ.tsx
================
import React, { useState } from 'react';
import { ChevronDown, ChevronUp } from 'lucide-react';

export default function FAQ() {
  const [openIndex, setOpenIndex] = useState<number | null>(null);

  const faqs = [
    {
      question: "What is Aikode?",
      answer: "Aikode is an AI-powered code generation platform that helps developers create applications faster by converting natural language descriptions into production-ready code."
    },
    {
      question: "Do I need coding experience?",
      answer: "While coding experience is helpful, Aikode is designed to be accessible to users with varying levels of expertise, from beginners to experienced developers."
    },
    {
      question: "What programming languages are supported?",
      answer: "Aikode supports multiple programming languages including JavaScript, TypeScript, Python, Java, and more. We're constantly adding support for new languages."
    },
    {
      question: "Can I deploy my applications directly from Aikode?",
      answer: "Yes! Aikode integrates with popular hosting platforms, allowing you to deploy your applications with just a few clicks."
    },
    {
      question: "Is my code secure?",
      answer: "Yes, we take security seriously. Your code is encrypted, and we never share or store your proprietary code. You retain full ownership of all generated code."
    }
  ];

  return (
    <section id="faq" className="relative py-20">
      <div className="absolute inset-0 bg-gradient-to-b from-[#0D0D1E] via-purple-900/10 to-[#0D0D1E] pointer-events-none"></div>
      
      <div className="relative max-w-3xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-16">
          <h2 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-400 mb-4">
            Frequently Asked Questions
          </h2>
          <p className="text-gray-400">
            Got questions? We've got answers.
          </p>
        </div>

        <div className="space-y-4">
          {faqs.map((faq, index) => (
            <div 
              key={index}
              className="glass-effect rounded-lg overflow-hidden transition-all duration-300"
            >
              <button
                className="w-full px-6 py-4 flex justify-between items-center text-left"
                onClick={() => setOpenIndex(openIndex === index ? null : index)}
              >
                <span className="text-white font-medium">{faq.question}</span>
                {openIndex === index ? (
                  <ChevronUp className="w-5 h-5 text-purple-400" />
                ) : (
                  <ChevronDown className="w-5 h-5 text-purple-400" />
                )}
              </button>
              {openIndex === index && (
                <div className="px-6 pb-4 text-gray-400 animate-fadeIn">
                  {faq.answer}
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
    </section>
  );
}

================
File: src/components/Features.tsx
================
import React from 'react';
import { GitBranch, Code, Zap, Globe } from 'lucide-react';

export default function Features() {
  const features = [
    {
      icon: <GitBranch className="w-6 h-6 text-purple-400" />,
      title: "Integrated Collaboration Tools",
      description: "Collaborate with team members in real-time through our integrated tools."
    },
    {
      icon: <Code className="w-6 h-6 text-pink-400" />,
      title: "Fast Code Generation",
      description: "Experience the speed of AI with our advanced algorithms that can generate code in mere seconds."
    },
    {
      icon: <Zap className="w-6 h-6 text-purple-400" />,
      title: "User Friendly Interface",
      description: "Navigate with ease through our sleek, intuitive interface designed for both novice and experienced developers."
    },
    {
      icon: <Globe className="w-6 h-6 text-pink-400" />,
      title: "Multi Language Proficiency",
      description: "Our platform supports various programming languages, including Python, JavaScript, and Ruby."
    }
  ];

  return (
    <section className="relative py-20">
      {/* Gradient overlay */}
      <div className="absolute inset-0 bg-gradient-to-b from-[#0D0D1E] via-purple-900/10 to-[#0D0D1E] pointer-events-none"></div>
      
      <div className="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-16">
          <h2 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-400 mb-4">
            Discover the Cutting Edge Features of Our Platform
          </h2>
          <p className="text-gray-400">
            Revolutionize your coding experience with our AI-driven tools designed to enhance productivity and performance.
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          {features.map((feature, index) => (
            <div 
              key={index} 
              className="group p-6 rounded-lg glass-effect hover:bg-white/10 transition-all duration-300 transform hover:-translate-y-1"
            >
              <div className="mb-4 transform transition-transform duration-300 group-hover:scale-110">{feature.icon}</div>
              <h3 className="text-xl font-semibold text-white mb-2">{feature.title}</h3>
              <p className="text-gray-400">{feature.description}</p>
            </div>
          ))}
        </div>
      </div>
    </section>
  );
}

================
File: src/components/Header.tsx
================
import React, { useState, useEffect } from 'react';
import { Code2 } from 'lucide-react';
import { useClerk, useUser } from '@clerk/clerk-react';
import NavLink from './navigation/NavLink';
import NavButton from './navigation/NavButton';
import MobileMenu from './navigation/MobileMenu';

export default function Header() {
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const { openSignIn, openSignUp, signOut } = useClerk();
  const { isSignedIn, user } = useUser();

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 20);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const handleSignOut = () => {
    signOut();
  };

  return (
    <header className={`fixed top-2 left-4 right-4 z-50 transition-all duration-300 ease-out
                     ${isScrolled ? 'translate-y-0' : 'translate-y-1'}`}>
      <div className={`mx-auto rounded-full border border-purple-500/10
                    bg-gradient-to-r from-purple-900/40 to-gray-900/40 backdrop-blur-md
                    shadow-lg shadow-purple-500/5
                    transition-all duration-300 ease-out
                    ${isScrolled ? 'py-2' : 'py-3'}`}>
        <div className="max-w-7xl mx-auto px-6 lg:px-8">
          <div className="flex justify-between items-center">
            <div className="flex items-center space-x-2 group">
              <Code2 className="w-6 h-6 text-purple-400 transform group-hover:rotate-12 transition-transform duration-300" />
              <span className="text-lg font-semibold text-white">Aikode</span>
            </div>
            
            <nav className="hidden md:flex items-center space-x-6">
              <NavLink href="#home">Home</NavLink>
              <NavLink href="#how-it-works">How it Works</NavLink>
              <NavLink href="#features">Features</NavLink>
              <NavLink href="#pricing">Pricing</NavLink>
              <NavLink href="#faq">FAQ</NavLink>
            </nav>

            <div className="hidden md:flex items-center space-x-4">
              {!isSignedIn ? (
                <>
                  <button
                    onClick={() => openSignUp()}
                    className="text-gray-300 hover:text-white transition-colors duration-300"
                  >
                    Sign Up
                  </button>
                  <NavButton onClick={() => openSignIn()}>
                    Sign In
                  </NavButton>
                </>
              ) : (
                <NavButton onClick={handleSignOut}>
                  Sign Out
                </NavButton>
              )}
            </div>

            <MobileMenu 
              isOpen={isMobileMenuOpen}
              onToggle={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
              isAuthenticated={isSignedIn}
              onSignIn={() => openSignIn()}
              onSignUp={() => openSignUp()}
              onSignOut={handleSignOut}
            />
          </div>
        </div>
      </div>
    </header>
  );
}

================
File: src/components/Hero.tsx
================
import React from 'react';
import { Search, Sparkles } from 'lucide-react';
import { useClerk, useUser } from '@clerk/clerk-react';

export default function Hero() {
  const { openSignUp } = useClerk();
  const { isSignedIn } = useUser();

  return (
    <div className="relative min-h-screen pt-24 pb-16 px-4">
      {/* Gradient Orbs */}
      <div className="absolute top-20 left-1/4 w-96 h-96 bg-purple-600/30 rounded-full filter blur-3xl animate-pulse-glow"></div>
      <div className="absolute top-40 right-1/4 w-96 h-96 bg-pink-600/20 rounded-full filter blur-3xl animate-pulse-glow delay-1000"></div>
      
      <div className="relative max-w-4xl mx-auto text-center">
        <div className="inline-flex items-center px-4 py-2 rounded-full glass-effect mb-8 animate-float">
          <Sparkles className="w-4 h-4 text-purple-400 mr-2" />
          <span className="text-sm text-gray-300">Powerful Tools</span>
        </div>
        
        <h1 className="text-5xl md:text-6xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-400 mb-6 leading-tight">
          Generate Code Effortlessly With AI
        </h1>
        
        <p className="text-xl text-gray-400 mb-12">
          AI-powered code generation for developers, from beginners to experts.
          Create, customize, and deploy your code in seconds.
        </p>

        <div className="max-w-2xl mx-auto relative">
          {isSignedIn ? (
            <div className="glass-effect rounded-lg p-2 transition-all duration-300 hover:border-purple-500/30">
              <div className="flex items-center">
                <Search className="w-5 h-5 text-gray-400 ml-2" />
                <input
                  type="text"
                  placeholder="Enter Keywords or URL"
                  className="w-full bg-transparent border-none focus:ring-0 text-white px-4 py-2"
                />
                <button className="px-4 py-2 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-500 hover:to-pink-500 text-white rounded-lg transition-all duration-300 transform hover:scale-105">
                  Start Generating
                </button>
              </div>
            </div>
          ) : (
            <button
              onClick={() => openSignUp()}
              className="px-8 py-4 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-500 hover:to-pink-500 text-white rounded-lg transition-all duration-300 transform hover:scale-105 font-medium text-lg"
            >
              Get Started Free
            </button>
          )}
          
          <p className="text-sm text-gray-400 mt-4">
            🚀 Free 14 days trial, no credit card needed!
          </p>
        </div>
      </div>
    </div>
  );
}

================
File: src/components/HowItWorks.tsx
================
import React from 'react';
import { Lightbulb, Code2, Rocket, Repeat } from 'lucide-react';

export default function HowItWorks() {
  const steps = [
    {
      icon: <Lightbulb className="w-8 h-8 text-purple-400" />,
      title: "Describe Your Idea",
      description: "Start by describing what you want to build in plain English. Our AI understands your requirements and context."
    },
    {
      icon: <Code2 className="w-8 h-8 text-pink-400" />,
      title: "AI Generates Code",
      description: "Watch as our AI transforms your description into production-ready code in seconds."
    },
    {
      icon: <Rocket className="w-8 h-8 text-purple-400" />,
      title: "Deploy Instantly",
      description: "Deploy your application with one click to your preferred hosting platform."
    },
    {
      icon: <Repeat className="w-8 h-8 text-pink-400" />,
      title: "Iterate & Refine",
      description: "Easily modify and enhance your code through natural language commands."
    }
  ];

  return (
    <section id="how-it-works" className="relative py-20">
      <div className="absolute inset-0 bg-gradient-to-b from-[#0D0D1E] via-purple-900/10 to-[#0D0D1E] pointer-events-none"></div>
      
      <div className="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-16">
          <h2 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-400 mb-4">
            How It Works
          </h2>
          <p className="text-gray-400 max-w-2xl mx-auto">
            Transform your ideas into reality with our simple four-step process. No coding experience required.
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
          {steps.map((step, index) => (
            <div 
              key={index}
              className="group relative p-6 rounded-lg glass-effect hover:bg-white/10 transition-all duration-300"
            >
              <div className="absolute -top-4 -right-4 w-24 h-24 bg-purple-500/10 rounded-full blur-2xl group-hover:bg-purple-500/20 transition-all duration-300"></div>
              <div className="relative">
                <div className="mb-4 transform transition-transform duration-300 group-hover:scale-110">{step.icon}</div>
                <h3 className="text-xl font-semibold text-white mb-2">{step.title}</h3>
                <p className="text-gray-400">{step.description}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </section>
  );
}

================
File: src/components/Pricing.tsx
================
import React from 'react';
import { Check } from 'lucide-react';

export default function Pricing() {
  const plans = [
    {
      name: "Starter",
      price: "Free",
      description: "Perfect for trying out Aikode",
      features: [
        "5 projects per month",
        "Basic code generation",
        "Community support",
        "Basic templates"
      ]
    },
    {
      name: "Pro",
      price: "$29",
      description: "For professional developers",
      features: [
        "Unlimited projects",
        "Advanced code generation",
        "Priority support",
        "Custom templates",
        "API access",
        "Team collaboration"
      ]
    },
    {
      name: "Enterprise",
      price: "Custom",
      description: "For large teams and organizations",
      features: [
        "Everything in Pro",
        "Custom integrations",
        "Dedicated support",
        "Training sessions",
        "SLA guarantee",
        "Custom AI models"
      ]
    }
  ];

  return (
    <section id="pricing" className="relative py-20">
      <div className="absolute inset-0 bg-gradient-to-b from-[#0D0D1E] via-purple-900/10 to-[#0D0D1E] pointer-events-none"></div>
      
      <div className="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-16">
          <h2 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-400 mb-4">
            Simple, Transparent Pricing
          </h2>
          <p className="text-gray-400 max-w-2xl mx-auto">
            Choose the perfect plan for your needs. All plans include updates and basic support.
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          {plans.map((plan, index) => (
            <div 
              key={index}
              className="group p-6 rounded-lg glass-effect hover:bg-white/10 transition-all duration-300 transform hover:-translate-y-1"
            >
              <h3 className="text-xl font-semibold text-white mb-2">{plan.name}</h3>
              <div className="mb-4">
                <span className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-400">
                  {plan.price}
                </span>
                {plan.price !== "Custom" && <span className="text-gray-400">/month</span>}
              </div>
              <p className="text-gray-400 mb-6">{plan.description}</p>
              <ul className="space-y-3 mb-6">
                {plan.features.map((feature, featureIndex) => (
                  <li key={featureIndex} className="flex items-center text-gray-300">
                    <Check className="w-5 h-5 text-purple-400 mr-2" />
                    {feature}
                  </li>
                ))}
              </ul>
              <button className="w-full px-6 py-2.5 rounded-lg bg-gradient-to-r from-purple-600/80 to-pink-600/80 hover:from-purple-600 hover:to-pink-600 text-white font-medium transition-all duration-300">
                Get Started
              </button>
            </div>
          ))}
        </div>
      </div>
    </section>
  );
}

================
File: src/pages/Dashboard.tsx
================
import React, { useState } from 'react';
import { useUser } from '@clerk/clerk-react';
import Split from 'react-split';
import WebContainer from '../components/webcontainer/WebContainer';
import ProjectsList from '../components/projects/ProjectsList';
import AIPrompt from '../components/ai/AIPrompt';
import DashboardHeader from '../components/dashboard/DashboardHeader';

export default function Dashboard() {
  const { user } = useUser();
  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);

  if (!user) return null;

  return (
    <div className="h-screen bg-[#0D0D1E] text-white flex flex-col">
      <DashboardHeader user={user} />
      <div className="flex-1 flex overflow-hidden">
        {/* Projects Sidebar */}
        <div 
          className={`border-r border-white/10 transition-all duration-300 ease-in-out
            ${isSidebarCollapsed ? 'w-[60px]' : 'w-[250px]'}`}
        >
          <ProjectsList isCollapsed={isSidebarCollapsed} onToggleCollapse={() => setIsSidebarCollapsed(!isSidebarCollapsed)} />
        </div>

        {/* Main Content Area */}
        <div className="flex-1 flex">
          <Split
            className="flex"
            sizes={[60, 40]}
            minSize={[400, 300]}
            gutterSize={4}
            gutterAlign="center"
            direction="horizontal"
          >
            {/* Web Container */}
            <div className="h-full">
              <WebContainer />
            </div>

            {/* AI Assistant */}
            <div className="h-full border-l border-white/10">
              <AIPrompt />
            </div>
          </Split>
        </div>
      </div>
    </div>
  );
}

================
File: src/pages/LandingPage.tsx
================
import React from 'react';
import Header from '../components/Header';
import Hero from '../components/Hero';
import Features from '../components/Features';
import HowItWorks from '../components/HowItWorks';
import Pricing from '../components/Pricing';
import FAQ from '../components/FAQ';

export default function LandingPage() {
  return (
    <div className="min-h-screen bg-[#0D0D1E]">
      <Header />
      <main>
        <Hero />
        <HowItWorks />
        <Features />
        <Pricing />
        <FAQ />
      </main>
      <footer className="py-8 text-center text-gray-400">
        <p>© {new Date().getFullYear()} Aikode. All rights reserved.</p>
      </footer>
    </div>
  );
}

================
File: src/services/webcontainer/config.ts
================
import { FileSystemTree } from '@webcontainer/api';

export const initialFileTree: FileSystemTree = {
  'package.json': {
    file: {
      contents: JSON.stringify({
        name: 'ai-generated-app',
        type: 'module',
        scripts: {
          dev: 'vite',
          build: 'vite build',
          preview: 'vite preview'
        },
        dependencies: {
          'react': '^18.3.1',
          'react-dom': '^18.3.1'
        },
        devDependencies: {
          '@types/react': '^18.3.5',
          '@types/react-dom': '^18.3.0',
          '@vitejs/plugin-react': '^4.3.1',
          'typescript': '^5.5.3',
          'vite': '^5.4.2'
        }
      }, null, 2)
    }
  },
  'index.html': {
    file: {
      contents: `
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>AI Generated App</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>`
    }
  },
  'vite.config.ts': {
    file: {
      contents: `
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  server: {
    host: true
  }
});`
    }
  },
  'src': {
    directory: {
      'main.tsx': {
        file: {
          contents: `
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';

const root = document.getElementById('root');
if (!root) throw new Error('Root element not found');

createRoot(root).render(
  <StrictMode>
    <App />
  </StrictMode>
);`
        }
      },
      'App.tsx': {
        file: {
          contents: `
import React from 'react';

export default function App() {
  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold">Ready to start coding!</h1>
    </div>
  );
}`
        }
      }
    }
  }
};

================
File: src/services/webcontainer/instance.ts
================
import { WebContainer } from '@webcontainer/api';
import { Terminal } from '@xterm/xterm';
import { initialFileTree } from './config';

let webcontainerInstance: WebContainer | null = null;
let terminal: Terminal | null = null;

export async function getWebContainer() {
  if (!webcontainerInstance) {
    try {
      webcontainerInstance = await WebContainer.boot();
      await webcontainerInstance.mount(initialFileTree);
      
      // Install dependencies after mounting files
      const installProcess = await webcontainerInstance.spawn('npm', ['install']);
      await installProcess.exit;
      
      // Start the dev server
      const serverProcess = await webcontainerInstance.spawn('npm', ['run', 'dev']);
      
      if (terminal) {
        const outputStream = new WritableStream({
          write(data) {
            terminal.write(data);
          }
        });
        serverProcess.output.pipeTo(outputStream);
      }
    } catch (error) {
      console.error('Failed to boot WebContainer:', error);
      throw error;
    }
  }
  return webcontainerInstance;
}

export function setTerminal(xterm: Terminal) {
  terminal = xterm;
}

export function getTerminal() {
  return terminal;
}

export async function writeFile(path: string, content: string) {
  if (!webcontainerInstance) throw new Error('WebContainer not initialized');

  try {
    const dir = path.split('/').slice(0, -1).join('/');
    if (dir) {
      await webcontainerInstance.fs.mkdir(dir, { recursive: true });
    }
    await webcontainerInstance.fs.writeFile(path, content);
  } catch (error) {
    console.error(`Failed to write file ${path}:`, error);
    throw error;
  }
}

================
File: src/services/webcontainer/process.ts
================
import { getWebContainer } from './instance';
import { getTerminal } from './instance';

export async function installDependencies() {
  const webcontainerInstance = await getWebContainer();
  const terminal = getTerminal();

  if (!terminal) {
    throw new Error('Terminal not initialized');
  }

  try {
    terminal.write('\x1b[1;34mInstalling dependencies...\x1b[0m\r\n');
    
    const installProcess = await webcontainerInstance.spawn('npm', ['install']);
    
    const outputStream = new WritableStream({
      write(data) {
        terminal.write(data);
      }
    });

    installProcess.output.pipeTo(outputStream);
    await installProcess.exit;
    
    terminal.write('\x1b[1;32mDependencies installed successfully!\x1b[0m\r\n');
  } catch (error) {
    terminal.write('\x1b[1;31mFailed to install dependencies\x1b[0m\r\n');
    console.error('Failed to install dependencies:', error);
    throw error;
  }
}

export async function startDevServer() {
  const webcontainerInstance = await getWebContainer();
  const terminal = getTerminal();

  if (!terminal) {
    throw new Error('Terminal not initialized');
  }

  try {
    terminal.write('\x1b[1;34mStarting development server...\x1b[0m\r\n');
    
    const serverProcess = await webcontainerInstance.spawn('npm', ['run', 'dev']);
    
    const outputStream = new WritableStream({
      write(data) {
        terminal.write(data);
      }
    });

    serverProcess.output.pipeTo(outputStream);
    return serverProcess;
  } catch (error) {
    terminal.write('\x1b[1;31mFailed to start development server\x1b[0m\r\n');
    console.error('Failed to start dev server:', error);
    throw error;
  }
}

================
File: src/services/ai.ts
================
import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: import.meta.env.VITE_OPENAI_API_KEY,
  dangerouslyAllowBrowser: true
});

export async function generateCode(prompt: string): Promise<string> {
  try {
    const completion = await openai.chat.completions.create({
      messages: [
        {
          role: "system",
          content: `You are an expert full-stack developer. Generate production-ready code based on user requirements.
          Follow these guidelines:
          - Use TypeScript and React for frontend
          - Include proper error handling
          - Add comprehensive comments
          - Follow best practices and design patterns
          - Ensure code is clean, modular, and maintainable
          - Include necessary types and interfaces
          - Add proper documentation for functions and components`
        },
        {
          role: "user",
          content: prompt
        }
      ],
      model: "gpt-3.5-turbo",
      temperature: 0.7,
      max_tokens: 4096,
    });

    return completion.choices[0].message.content || '';
  } catch (error) {
    console.error('Error generating code:', error);
    throw error;
  }
}

================
File: src/services/clerk.ts
================
import { ClerkProvider } from '@clerk/clerk-react';

const publishableKey = import.meta.env.VITE_CLERK_PUBLISHABLE_KEY;

if (!publishableKey) {
  throw new Error('Missing Clerk Publishable Key');
}

export { publishableKey };

================
File: src/services/webcontainer.ts
================
import { WebContainer } from '@webcontainer/api';
import { Terminal } from '@xterm/xterm';

let webcontainerInstance: WebContainer | null = null;
let terminal: Terminal | null = null;

export async function getWebContainer() {
  if (!webcontainerInstance) {
    try {
      webcontainerInstance = await WebContainer.boot();
      await initializeFiles();
    } catch (error) {
      console.error('Failed to boot WebContainer:', error);
      throw error;
    }
  }
  return webcontainerInstance;
}

async function initializeFiles() {
  if (!webcontainerInstance) return;

  try {
    // Create src directory
    await webcontainerInstance.fs.mkdir('src');

    // Initialize package.json
    await webcontainerInstance.fs.writeFile('package.json', JSON.stringify({
      name: 'ai-generated-app',
      type: 'module',
      scripts: {
        dev: 'vite',
        build: 'vite build',
        preview: 'vite preview'
      },
      dependencies: {
        'react': '^18.3.1',
        'react-dom': '^18.3.1'
      },
      devDependencies: {
        '@types/react': '^18.3.5',
        '@types/react-dom': '^18.3.0',
        '@vitejs/plugin-react': '^4.3.1',
        'typescript': '^5.5.3',
        'vite': '^5.4.2'
      }
    }, null, 2));

    // Initialize vite.config.ts
    await webcontainerInstance.fs.writeFile('vite.config.ts', `
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  server: {
    host: true
  }
});
    `.trim());

    // Initialize index.html
    await webcontainerInstance.fs.writeFile('index.html', `
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>AI Generated App</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
    `.trim());

    // Initialize main.tsx
    await webcontainerInstance.fs.writeFile('src/main.tsx', `
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';

const root = document.getElementById('root');
if (!root) throw new Error('Root element not found');

createRoot(root).render(
  <StrictMode>
    <App />
  </StrictMode>
);
    `.trim());

    // Initialize App.tsx
    await webcontainerInstance.fs.writeFile('src/App.tsx', `
import React from 'react';

export default function App() {
  return (
    <div>
      <h1>Ready to start coding!</h1>
    </div>
  );
}
    `.trim());

  } catch (error) {
    console.error('Failed to initialize files:', error);
    throw error;
  }
}

export async function writeFile(path: string, content: string) {
  if (!webcontainerInstance) throw new Error('WebContainer not initialized');

  try {
    const dir = path.split('/').slice(0, -1).join('/');
    if (dir) {
      await webcontainerInstance.fs.mkdir(dir, { recursive: true });
    }
    await webcontainerInstance.fs.writeFile(path, content);
  } catch (error) {
    console.error(`Failed to write file ${path}:`, error);
    throw error;
  }
}

export async function installDependencies() {
  if (!webcontainerInstance) throw new Error('WebContainer not initialized');

  try {
    const installProcess = await webcontainerInstance.spawn('npm', ['install']);
    
    const outputStream = new WritableStream({
      write(data) {
        if (terminal) {
          terminal.write(data);
        }
      }
    });

    installProcess.output.pipeTo(outputStream);
    return installProcess.exit;
  } catch (error) {
    console.error('Failed to install dependencies:', error);
    throw error;
  }
}

export async function startDevServer() {
  if (!webcontainerInstance) throw new Error('WebContainer not initialized');

  try {
    const serverProcess = await webcontainerInstance.spawn('npm', ['run', 'dev']);
    
    const outputStream = new WritableStream({
      write(data) {
        if (terminal) {
          terminal.write(data);
        }
      }
    });

    serverProcess.output.pipeTo(outputStream);
    return serverProcess;
  } catch (error) {
    console.error('Failed to start dev server:', error);
    throw error;
  }
}

export function setTerminal(xterm: Terminal) {
  terminal = xterm;
}

================
File: src/store/useStore.ts
================
import { create } from 'zustand';
import { Project } from '../types';

interface AppState {
  currentProject: Project | null;
  projects: Project[];
  setCurrentProject: (project: Project | null) => void;
  addProject: (project: Project) => void;
  updateProjectFiles: (projectId: string, files: { [path: string]: string }) => void;
  deleteProject: (projectId: string) => void;
}

export const useStore = create<AppState>((set) => ({
  currentProject: null,
  projects: [],
  setCurrentProject: (project) => set({ currentProject: project }),
  addProject: (project) =>
    set((state) => ({ projects: [...state.projects, project] })),
  updateProjectFiles: (projectId, files) =>
    set((state) => ({
      projects: state.projects.map((p) =>
        p.id === projectId ? { ...p, files: { ...p.files, ...files } } : p
      ),
    })),
  deleteProject: (projectId) =>
    set((state) => ({
      projects: state.projects.filter((p) => p.id !== projectId),
      currentProject: state.currentProject?.id === projectId ? null : state.currentProject,
    })),
}));

================
File: src/types/index.ts
================
export interface Message {
  type: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

export interface Project {
  id: string;
  name: string;
  files: {
    [path: string]: string;
  };
}

================
File: src/App.tsx
================
import React from 'react';
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import { ClerkProvider, SignedIn, SignedOut } from '@clerk/clerk-react';
import LandingPage from './pages/LandingPage';
import Dashboard from './pages/Dashboard';
import { publishableKey } from './services/clerk';

function App() {
  return (
    <ClerkProvider publishableKey={publishableKey}>
      <BrowserRouter>
        <Routes>
          <Route path="/" element={
            <SignedIn>
              <Navigate to="/dashboard" replace />
            </SignedIn>
          }>
            <Route index element={
              <SignedOut>
                <LandingPage />
              </SignedOut>
            } />
          </Route>
          <Route path="/dashboard" element={
            <SignedIn>
              <Dashboard />
            </SignedIn>
          } />
          <Route path="*" element={<Navigate to="/" replace />} />
        </Routes>
      </BrowserRouter>
    </ClerkProvider>
  );
}

export default App;

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  body {
    @apply bg-[#0D0D1E] overflow-x-hidden text-white;
  }
}

@layer utilities {
  .glass-effect {
    @apply bg-white/5 backdrop-blur-lg border border-white/10;
  }
  
  .purple-gradient {
    @apply bg-gradient-to-r from-purple-600/20 to-pink-600/20;
  }
}

@keyframes float {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-20px); }
}

@keyframes pulse-glow {
  0%, 100% { opacity: 0.5; }
  50% { opacity: 1; }
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-float {
  animation: float 6s ease-in-out infinite;
}

.animate-pulse-glow {
  animation: pulse-glow 4s ease-in-out infinite;
}

/* Monaco Editor Customization */
.monaco-editor .margin {
  background-color: #0D0D1E !important;
}

.monaco-editor .minimap {
  background-color: #0D0D1E !important;
}

/* XTerm Customization */
.xterm {
  padding: 8px;
}

.xterm-viewport {
  background-color: #0D0D1E !important;
}

/* Split.js Customization */
.gutter {
  background-color: rgba(255, 255, 255, 0.1);
}

.gutter:hover {
  background-color: rgba(255, 255, 255, 0.2);
}

.gutter.gutter-vertical {
  cursor: row-resize;
}

.gutter.gutter-horizontal {
  cursor: col-resize;
}

================
File: src/main.tsx
================
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';
import './index.css';

const root = document.getElementById('root');
if (!root) throw new Error('Root element not found');

createRoot(root).render(
  <StrictMode>
    <App />
  </StrictMode>
);

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: eslint.config.js
================
import js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  }
);

================
File: index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Aikode - AI-Powered Web Development</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "vite-react-typescript-starter",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@clerk/clerk-react": "^4.32.4",
    "@monaco-editor/react": "^4.6.0",
    "@webcontainer/api": "^1.1.8",
    "@xterm/xterm": "^5.4.0",
    "lucide-react": "^0.344.0",
    "openai": "^4.28.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.22.2",
    "react-split": "^2.0.14",
    "repomix": "^0.2.5",
    "xterm-addon-fit": "^0.8.0",
    "zustand": "^4.5.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.1",
    "@types/react": "^18.3.5",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.18",
    "eslint": "^9.9.1",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.11",
    "globals": "^15.9.0",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.3.0",
    "vite": "^5.4.2"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {
      colors: {
        primary: {
          DEFAULT: '#10B981',
          dark: '#059669',
        },
      },
      fontFamily: {
        sans: ['Inter', 'system-ui', 'sans-serif'],
      },
      animation: {
        fadeIn: 'fadeIn 0.3s ease-out',
      },
    },
  },
  plugins: [],
};

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}

================
File: tsconfig.json
================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}

================
File: vite.config.ts
================
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  optimizeDeps: {
    exclude: ['@webcontainer/api'],
  },
  server: {
    host: true,
    headers: {
      'Cross-Origin-Embedder-Policy': 'require-corp',
      'Cross-Origin-Opener-Policy': 'same-origin',
    },
  },
});
